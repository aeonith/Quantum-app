name: Build Android AAB (from zip)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      API_BASE_URL: https://api.example.com
      KEY_ALIAS: Aeonith999
      KEYSTORE_PASSWORD: Aeonith999StorePass
      KEY_PASSWORD: Aeonith999KeyPass
      KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Accept Android SDK licenses (best-effort)
        shell: bash
        run: yes | "${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager" --licenses > /dev/null || true

      - name: Find and unzip source to ./src
        shell: bash
        run: |
          set -euo pipefail
          ZIP="$(ls -1 *.zip 2>/dev/null | head -n1 || true)"
          if [[ -z "$ZIP" ]]; then
            echo "::error::No zip found in repo root."; exit 1
          fi
          echo "Using zip: $ZIP"
          rm -rf src && mkdir -p src
          unzip -q "$ZIP" -d src
          # Flatten single top-level folder if present
          if [[ "$(find src -mindepth 1 -maxdepth 1 -type d | wc -l)" -eq 1 ]]; then
            topdir="$(find src -mindepth 1 -maxdepth 1 -type d)"
            shopt -s dotglob
            mv "$topdir"/* src/
            rmdir "$topdir"
          fi

      - name: Ensure Flutter android platform
        shell: bash
        working-directory: src
        run: |
          set -euo pipefail
          [[ -f pubspec.yaml ]] || { echo "::error::pubspec.yaml not found in src/"; exit 1; }
          [[ -d android ]] || flutter create . --platforms=android

      - name: flutter pub get
        working-directory: src
        run: flutter pub get

      - name: Create common asset directories if missing
        shell: bash
        working-directory: src
        run: |
          set -euo pipefail
          mkdir -p assets assets/images
          touch assets/.gitkeep assets/images/.gitkeep

      # ------- HARD FIXES BEFORE BUILD -------
      - name: Fix bad import and CardTheme rename
        shell: bash
        working-directory: src
        run: |
          set -euo pipefail
          shopt -s nullglob

          # 1) Determine app package name from pubspec.yaml
          APP_NAME="$(awk '/^name:[[:space:]]*/{print $2; exit}' pubspec.yaml)"
          if [[ -z "${APP_NAME:-}" ]]; then
            echo "::warning::Could not read app name from pubspec.yaml; skipping package import fix."
          else
            # Replace package:src/main.dart -> package:<app_name>/main.dart
            files=( $(grep -RIl --include="*.dart" -e 'package:src/main.dart' lib test . 2>/dev/null || true) )
            if (( ${#files[@]} )); then
              printf "Fixing package imports in:\n%s\n" "${files[@]}"
              for f in "${files[@]}"; do
                sed -i "s|package:src/main.dart|package:${APP_NAME}/main.dart|g" "$f"
              done
            fi
          fi

          # 2) Revert CardThemeData( -> CardTheme( if present
          ct_files=( $(grep -RIl --include="*.dart" -e 'CardThemeData\(' lib . 2>/dev/null || true) )
          if (( ${#ct_files[@]} )); then
            printf "Reverting CardThemeData( -> CardTheme( in:\n%s\n" "${ct_files[@]}"
            for f in "${ct_files[@]}"; do
              sed -i 's/\bCardThemeData(/CardTheme(/g' "$f"
            done
          fi

      - name: Restore or generate keystore & write key.properties
        shell: bash
        working-directory: src
        run: |
          set -euo pipefail
          mkdir -p android/app

          if [[ -n "${KEYSTORE_BASE64}" ]]; then
            echo "Restoring upload-keystore.jks from secret"
            echo "${KEYSTORE_BASE64}" | base64 -d > android/app/upload-keystore.jks
          fi

          if [[ ! -f android/app/upload-keystore.jks ]]; then
            echo "Generating upload-keystore.jks (fallback)"
            keytool -genkeypair \
              -alias "${KEY_ALIAS}" \
              -keyalg RSA -keysize 2048 -validity 36500 \
              -storetype JKS \
              -keystore android/app/upload-keystore.jks \
              -storepass "${KEYSTORE_PASSWORD}" \
              -keypass "${KEY_PASSWORD}" \
              -dname "CN=Aeonith, OU=Dev, O=Quantum, L=NY, S=NY, C=US"
          fi

          cat > android/key.properties <<EOF
          storeFile=upload-keystore.jks
          storePassword=${KEYSTORE_PASSWORD}
          keyAlias=${KEY_ALIAS}
          keyPassword=${KEY_PASSWORD}
          EOF
          echo "Wrote android/key.properties"

      - name: Build release AAB
        working-directory: src
        env:
          API_BASE_URL: ${{ env.API_BASE_URL }}
          # Gradle needs memory on CI sometimes
          ORG_GRADLE_PROJECT_org.gradle.jvmargs: "-Xmx2g -Dfile.encoding=UTF-8"
        run: |
          set -euo pipefail
          flutter doctor -v || true
          ./android/gradlew -v || true
          flutter build appbundle \
            --release \
            --dart-define=API_BASE_URL="${API_BASE_URL}" \
            --no-tree-shake-icons \
            --verbose

      - name: Upload AAB artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-release.aab
          path: src/build/app/outputs/bundle/release/app-release.aab
          if-no-files-found: warn