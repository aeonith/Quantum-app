name: Build Android AAB (from zip)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      API_BASE_URL: https://api.example.com
      # Signing (optional but supported)
      KEY_ALIAS: Aeonith999
      KEYSTORE_PASSWORD: Aeonith999StorePass
      KEY_PASSWORD: Aeonith999KeyPass
      KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Accept Android SDK licenses (best-effort)
        shell: bash
        run: yes | "${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager" --licenses > /dev/null || true

      - name: Find and unzip source to ./src
        shell: bash
        run: |
          set -euo pipefail
          ZIP="$(ls -1 *.zip 2>/dev/null | head -n1 || true)"
          if [[ -z "$ZIP" ]]; then
            echo "::error::No zip found in repo root."; exit 1
          fi
          echo "Using zip: $ZIP"
          rm -rf src && mkdir -p src
          unzip -q "$ZIP" -d src
          # Flatten single top-level folder if present
          if [[ "$(find src -mindepth 1 -maxdepth 1 -type d | wc -l)" -eq 1 ]]; then
            topdir="$(find src -mindepth 1 -maxdepth 1 -type d)"
            shopt -s dotglob
            mv "$topdir"/* src/
            rmdir "$topdir"
          fi

      - name: Ensure Flutter android platform
        shell: bash
        working-directory: src
        run: |
          set -euo pipefail
          [[ -f pubspec.yaml ]] || { echo "::error::pubspec.yaml not found in src/"; exit 1; }
          [[ -d android ]] || flutter create . --platforms=android

      - name: flutter pub get
        working-directory: src
        run: flutter pub get

      - name: Create common asset directories if missing
        shell: bash
        working-directory: src
        run: |
          set -euo pipefail
          mkdir -p assets assets/images
          touch assets/.gitkeep assets/images/.gitkeep

      # ----------- TOOLCHAIN PIN (fixes your 'Cannot use Kotlin build script compile avoidance' crash) -----------
      - name: Normalize Android Gradle/Kotlin toolchain
        shell: bash
        working-directory: src/android
        run: |
          set -euo pipefail

          # 1) Gradle wrapper -> 8.3 (compatible with AGP 8.3.x and Kotlin 1.9.22)
          if [[ -f gradle/wrapper/gradle-wrapper.properties ]]; then
            sed -i 's#^distributionUrl=.*#distributionUrl=https\\://services.gradle.org/distributions/gradle-8.3-bin.zip#' gradle/wrapper/gradle-wrapper.properties
            echo "Pinned Gradle wrapper to 8.3"
          fi

          # 2) Project build.gradle (buildscript or plugins DSL) -> set AGP 8.3.2 & Kotlin 1.9.22
          if [[ -f build.gradle ]]; then
            # a) buildscript { ext.kotlin_version = "..." }
            if grep -q 'kotlin_version' build.gradle; then
              sed -i 's/kotlin_version[[:space:]]*=[[:space:]]*"[0-9.]\+"/kotlin_version = "1.9.22"/' build.gradle
              echo "Pinned kotlin_version to 1.9.22 in build.gradle"
            fi
            # b) classpath for AGP
            if grep -q 'com.android.tools.build:gradle' build.gradle; then
              sed -i 's#com\.android\.tools\.build:gradle:[0-9.]\+#com.android.tools.build:gradle:8.3.2#' build.gradle
              echo "Pinned AGP to 8.3.2 in build.gradle"
            fi
            # c) plugins DSL (org.jetbrains.kotlin.android version "â€¦")
            if grep -q 'id[[:space:]]*"org.jetbrains.kotlin.android"' build.gradle; then
              sed -i 's/id[[:space:]]*"org\.jetbrains\.kotlin\.android"[[:space:]]*version[[:space:]]*"[0-9.]\+"/id "org.jetbrains.kotlin.android" version "1.9.22"/' build.gradle
              echo "Pinned Kotlin Android plugin to 1.9.22 in plugins DSL (build.gradle)"
            fi
          fi

          # 3) settings.gradle sometimes declares pluginManagement versions
          if [[ -f ../settings.gradle ]] || [[ -f settings.gradle ]]; then
            FILE="../settings.gradle"; [[ -f settings.gradle ]] && FILE="settings.gradle"
            sed -i 's/id("org\.jetbrains\.kotlin\.android")[[:space:]]*version[[:space:]]*"[0-9.]\+"/id("org.jetbrains.kotlin.android") version "1.9.22"/g' "$FILE" || true
            sed -i 's/id("com\.android\.application")[[:space:]]*version[[:space:]]*"[0-9.]\+"/id("com.android.application") version "8.3.2"/g' "$FILE" || true
            sed -i 's/id("com\.android\.library")[[:space:]]*version[[:space:]]*"[0-9.]\+"/id("com.android.library") version "8.3.2"/g' "$FILE" || true
            echo "Patched pluginManagement versions in $FILE (if present)"
          fi

      # ----------- OPTIONAL CODE FIXUPS (safe no-ops if not needed) -----------
      - name: Fix common source issues on the fly
        shell: bash
        working-directory: src
        run: |
          set -euo pipefail
          shopt -s nullglob
          # Package name from pubspec for import correction
          APP_NAME="$(awk '/^name:[[:space:]]*/{print $2; exit}' pubspec.yaml || true)"
          if [[ -n "${APP_NAME}" ]]; then
            files=( $(grep -RIl --include="*.dart" -e 'package:src/main.dart' lib test . 2>/dev/null || true) )
            for f in "${files[@]}"; do
              sed -i "s|package:src/main.dart|package:${APP_NAME}/main.dart|g" "$f"
            done
          fi
          # If any accidental CardThemeData( exists, revert to CardTheme(
          ct_files=( $(grep -RIl --include="*.dart" -e 'CardThemeData\(' lib . 2>/dev/null || true) )
          for f in "${ct_files[@]}"; do
            sed -i 's/\bCardThemeData(/CardTheme(/g' "$f"
          done

      - name: Restore or generate keystore & write key.properties
        shell: bash
        working-directory: src
        run: |
          set -euo pipefail
          mkdir -p android/app
          if [[ -n "${KEYSTORE_BASE64}" ]]; then
            echo "${KEYSTORE_BASE64}" | base64 -d > android/app/upload-keystore.jks
          fi
          if [[ ! -f android/app/upload-keystore.jks ]]; then
            keytool -genkeypair \
              -alias "${KEY_ALIAS}" \
              -keyalg RSA -keysize 2048 -validity 36500 \
              -storetype JKS \
              -keystore android/app/upload-keystore.jks \
              -storepass "${KEYSTORE_PASSWORD}" \
              -keypass "${KEY_PASSWORD}" \
              -dname "CN=Aeonith, OU=Dev, O=Quantum, L=NY, S=NY, C=US"
          fi
          cat > android/key.properties <<EOF
          storeFile=upload-keystore.jks
          storePassword=${KEYSTORE_PASSWORD}
          keyAlias=${KEY_ALIAS}
          keyPassword=${KEY_PASSWORD}
          EOF

      - name: Build release AAB
        working-directory: src
        env:
          API_BASE_URL: ${{ env.API_BASE_URL }}
          ORG_GRADLE_PROJECT_org.gradle.jvmargs: "-Xmx2g -Dfile.encoding=UTF-8"
        run: |
          set -euo pipefail
          flutter build appbundle \
            --release \
            --dart-define=API_BASE_URL="${API_BASE_URL}" \
            --no-tree-shake-icons \
            --verbose

      - name: Upload AAB artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-release.aab
          path: src/build/app/outputs/bundle/release/app-release.aab
          if-no-files-found: warn